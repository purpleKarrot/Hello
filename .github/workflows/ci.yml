name: Build and Test
on: [push]
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Ubuntu GCC
          os: ubuntu-20.04
          cc: gcc-10
          cxx: g++-10
          cflags: --coverage
          cxxflags: --coverage
          cmake-generator: Unix Makefiles
          coverage-command: gcov-10
        - name: Ubuntu Clang
          os: ubuntu-20.04
          cc: clang-12
          cxx: clang++-12
          cflags: -fno-omit-frame-pointer -fsanitize=address
          cxxflags: -fno-omit-frame-pointer -fsanitize=address
          cmake-generator: Unix Makefiles
          memorycheck-type: AddressSanitizer
        - name: Windows MSVC
          os: windows-2022
          cmake-generator: Visual Studio 17 2022
        - name: macOS
          os: macos-11
          cmake-generator: Xcode
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      CFLAGS: ${{ matrix.config.cflags }}
      CXXFLAGS: ${{ matrix.config.cxxflags }}
    steps:
      - uses: actions/checkout@v2
      - name: CTest Script
        shell: ctest --build-config Debug --extra-verbose --script {0}
        run: |
          cmake_minimum_required(VERSION 3.7)

          site_name(CTEST_SITE)
          set(CTEST_SOURCE_DIRECTORY "$ENV{GITHUB_WORKSPACE}")
          set(CTEST_BINARY_DIRECTORY "$ENV{GITHUB_WORKSPACE}/build")
          set(CTEST_CMAKE_GENERATOR "${{ matrix.config.cmake-generator }}")
          set(CTEST_COVERAGE_COMMAND "${{ matrix.config.coverage-command }}")
          set(CTEST_MEMORYCHECK_TYPE "${{ matrix.config.memorycheck-type }}")
          set(CTEST_SUBMIT_URL "https://webhook.site/75d946f8-0b78-4591-a43b-ba3b0d079f4a")
          set(CTEST_UPDATE_VERSION_ONLY ON)
          find_program(CTEST_GIT_COMMAND git)

          cmake_host_system_information(RESULT NPROC QUERY NUMBER_OF_LOGICAL_CORES)

          ctest_start("Experimental")
          ctest_submit(PARTS "Start")

          ctest_update()
          ctest_submit(PARTS "Update")

          ctest_configure()
          ctest_submit(PARTS "Configure")

          ctest_build(PARALLEL_LEVEL ${NPROC})
          ctest_submit(PARTS "Build")

          if(CTEST_MEMORYCHECK_TYPE)
            ctest_memcheck(PARALLEL_LEVEL ${NPROC})
            ctest_submit(PARTS "MemCheck")
          else()
            ctest_test(PARALLEL_LEVEL ${NPROC})
            ctest_submit(PARTS "Test")
          endif()

          if(CTEST_COVERAGE_COMMAND)
            ctest_coverage()
            ctest_submit(PARTS "Coverage")
          endif()

          ctest_submit(PARTS "Done")
